%% allmats.m
% Prepares 3D matrices of trial-by-trial neuronal responses suitable for
% input into 'FindPEONS.m'. It processes aggregated trial-by-trial data
% (from 'allom', 'allst', 'alldv' cell arrays, typically created by 'createtable.m')
% by normalizing the number of trials per condition to 50 (through subsampling
% if necessary) and applying a scaling factor.
%
% Workflow:
% 1. Takes 'allom' (cell array: selected_neurons x probability_conditions, where
%    each cell has a vector of single-trial omission responses), 'allst' (for
%    standard tones), and 'alldv' (for deviant tones) as input.
%    Also requires 'omind' (indices of selected neurons).
% 2. For each selected neuron and each probability condition:
%    a. Extracts the vector of trial responses from the input cell array (e.g., A = allom{i,j}).
%    b. Calculates a 'step_size' to subsample the trial vector 'A' to ensure
%       that the resulting 'sampled_elements' vector has exactly 50 trials. This
%       accommodates input trial vectors of fixed lengths (e.g., 50, 100, 200, etc.).
%    c. Takes the first 50 elements from 'sampled_elements'.
%    d. Multiplies these 50 trial responses by a scaling factor of 30000.
% 3. Stores these processed trial-by-trial responses in 3D matrices:
%    - 'allommat' (selected_neurons x 50 trials x 8 omission_conditions)
%    - 'allAmat'  (selected_neurons x 50 trials x 7 toneA_conditions)
%    - 'allBmat'  (selected_neurons x 50 trials x 7 toneB_conditions)
% 4. 'allommat' is the primary input for 'FindPEONS.m'. 'allAmat' and 'allBmat'
%    can be used for other tone response analyses.
%
% Inputs (expected in the MATLAB path or workspace):
%   - allom: Cell array (neurons x 8 probability_conditions) of trial-by-trial
%            omission responses. Each cell contains a vector of responses.
%            (Typically generated by 'createtable.m').
%   - allst: Cell array (neurons x 7 conditions) for "standard" tone responses.
%   - alldv: Cell array (neurons x 7 conditions) for "deviant" tone responses.
%   - omind: Vector of indices of selected neurons to be processed.
%
% Outputs (variables created in the workspace):
%   - allommat: 3D matrix of scaled, trial-by-trial omission responses.
%   - allAmat:  3D matrix of scaled, trial-by-trial Tone A (standard/deviant) responses.
%   - allBmat:  3D matrix of scaled, trial-by-trial Tone B (deviant/standard) responses.
%
%
% Author: Amit Yaron

omit=0;
t=0;
clear allommat
clear meanomtr
clear allAmat
clear meanAtr
clear allBmatALL
clear meanBtr
for i=omind
    t=t+1;
    for j=1:4
        A=allom{i,j};
        array_length = length(A); 
        step_size = round((array_length - 1) / 51);
        sampled_elements = A(1:step_size:end);
        allommat(t,:,j) = 30000*sampled_elements(1:50);
    end
    for j=5:8
        A=allom{i,j};
        array_length = length(A); 
        step_size = round((array_length - 1) / 51);
        sampled_elements = A(1:step_size:end);
        allommat(t,:,j) = 30000*sampled_elements(1:50);
    end
end

dataMatrix=allommat;
tonePercentages = [1, 0.95, 0.85, 0.75, 0.2, 0.1, 0.05,0];
numNeurons = length(allommat)
numReps = 50;
numConditions = 7;
R2_valuesO = zeros(numNeurons, 1); 
p_valuesO = zeros(numNeurons, 1); 
% for neuron = 1:numNeurons
%     neuronData = squeeze(dataMatrix(neuron, :, :)); % 50 reps x 8 conditions
%     neuralResponses = reshape(neuronData, [], 1);
%     repeatedTonePercentages = repmat(tonePercentages, numReps, 1);
%     tbl = table(repeatedTonePercentages(:), neuralResponses, 'VariableNames', {'TonePercentage', 'NeuralResponse'});
%     lm = fitlm(tbl, 'NeuralResponse ~ TonePercentage');
%     R2_valuesO(neuron) = lm.Rsquared.Ordinary;
%     p_valuesO(neuron) = lm.Coefficients.pValue(2);
% end

t=0;

for i=omind
    t=t+1;
    for j=1:4
        A=allst{i,j};
        array_length = length(A); 
        step_size = round((array_length - 1) / 51);
        sampled_elements = A(1:step_size:end);
        allAmat(t,:,j) = 30000*sampled_elements(1:50);
    end
    for j=5:7
        A=alldv{i,j};
        array_length = length(A); 
        step_size = round((array_length - 1) / 51);
        sampled_elements = A(1:step_size:end);
        allAmat(t,:,j) = 30000*sampled_elements(1:50);
    end
end
dataMatrix=allAmat;
tonePercentages = [1, 0.95, 0.85, 0.75, 0.2, 0.1, 0.05];
numNeurons =  length(allAmat);
numReps = 50;
numConditions = 7;
R2_valuesA = zeros(numNeurons, 1); 
p_valuesA = zeros(numNeurons, 1); 
% for neuron = 1:numNeurons
%     neuronData = squeeze(dataMatrix(neuron, :, :));
%     neuralResponses = reshape(neuronData, [], 1);
%     repeatedTonePercentages = repmat(tonePercentages, numReps, 1);
%     tbl = table(repeatedTonePercentages(:), neuralResponses, 'VariableNames', {'TonePercentage', 'NeuralResponse'});
%     lm = fitlm(tbl, 'NeuralResponse ~ TonePercentage');
%     R2_valuesA(neuron) = lm.Rsquared.Ordinary;
%     p_valuesA(neuron) = lm.Coefficients.pValue(2) ;
% end



t=0;

for i=omind
    t=t+1;
    for j=2:4
        A=alldv{i,j};
        array_length = length(A); 
        step_size = round((array_length - 1) / 51);
        sampled_elements = A(1:step_size:end);
        allBmat(t,:,j-1) = 30000*sampled_elements(1:50);
    end
    for j=5:8
        A=allst{i,j};
        array_length = length(A); 
        step_size = round((array_length - 1) / 51);
        sampled_elements = A(1:step_size:end);
        allBmat(t,:,j-1) = 30000*sampled_elements(1:50);
    end
end
dataMatrix=allBmat;
tonePercentages = [0.95, 0.9, 0.85, 0.75, 0.2, 0.1, 0.05];
numNeurons =  length(allommat);
numReps = 50;
numConditions = 7;
R2_valuesB = zeros(numNeurons, 1); 
p_valuesB = zeros(numNeurons, 1); 
% for neuron = 1:numNeurons
%     neuronData = squeeze(dataMatrix(neuron, :, :));
%     neuralResponses = reshape(neuronData, [], 1);
%     repeatedTonePercentages = repmat(tonePercentages, numReps, 1);
%     tbl = table(repeatedTonePercentages(:), neuralResponses, 'VariableNames', {'TonePercentage', 'NeuralResponse'});
%     lm = fitlm(tbl, 'NeuralResponse ~ TonePercentage');
%     R2_valuesB(neuron) = lm.Rsquared.Ordinary;
%     p_valuesB(neuron) = lm.Coefficients.pValue(2) ;
% end
%%
clear alldvmat
clear allstmat
for i=omind
    t=t+1;
    for j=1:7
        A=alldv{i,j};
        array_length = length(A); 
        step_size = round((array_length - 1) / 51);
        sampled_elements = A(1:step_size:end);
        alldvmat(t,:,j) = 30000*sampled_elements(1:50);
    end
end

for i=omind
    t=t+1;
    for j=1:8
        A=allst{i,j};
        array_length = length(A); 
        step_size = round((array_length - 1) / 801);
        sampled_elements = A(1:1:end);
        allstmat(t,:,j) = 30000*sampled_elements(1:300);
    end
end
