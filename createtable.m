%% createtable.m
% Aggregates processed data from multiple datasets (outputs of 'batchall.m')
% into a single structured database 'Db' and a table 'Tb' (for mixed effects, not used in final paper).
% The 'Db' structure is then used by 'allmats.m' to prepare data for 'FindPEONS.m'.
%
% Workflow:
% 1. Initializes 'Db' structure with fields for responses, latencies, metadata.
% 2. Loads 'tables.mat' (dataset metadata).
% 3. Loops through each dataset:
%    a. Loads dynamically named workspace variables (e.g., 'testC1', 'meanomC1', 'chC1')
%       previously generated by 'batchall.m'.
%    b. Extracts and appends data (mean responses, latencies, depth, neuron ID,
%       rat ID, penetration ID, location, probabilities) into 'Db' fields for
%       selected neurons ('omind', potentially filtered by depth or activity).
%    c. Extracts trial-by-trial responses from the 'test' structure of each dataset
%       into cell arrays 'allom', 'allst', 'alldv', 'allind' in the workspace.
%
% Inputs (expected in the MATLAB path or workspace):
%   - tables.mat: Cell array with metadata for each dataset.
%   - Dynamically named workspace variables from 'batchall.m' (e.g., testC1,
%     meanomC1, chC1 for each dataset ID in 'tables.mat'). These contain
%     processed metrics and channel depth information.
%  
%
% Outputs:
%   - Db: Structure containing aggregated data. Key fields include:
%         Db.Ores, Db.Ares, Db.Bres (mean responses); Db.depth; Db.probA, Db.probB;
%         Db.rat, Db.penet, Db.loc; Db.neuron (unique ID).
%   - Tb: Table formatted for mixed-effects models (not used in final paper).
%   - Workspace cell arrays: 'allom', 'allst', 'alldv', 'allind' are populated
%     with trial-by-trial responses from all datasets. These are then used by 'allmats.m'.
%
% Dependencies:
%   - Relies on workspace variables created by 'batchall.m'.
%
% Author: Amit Yaron
Db.Ores=[];
Db.Olat=[];
Db.depth=[];
Db.Ares=[];
Db.Alat=[];
Db.Atone=[];
Db.penet=[];
Db.probA=[];
Db.probB=[];
Db.rat=[]; 
Db.loc=[];
Db.neuron=[];
Db.Bres=[];
Db.Blat=[];
auditoryneurons=0;
omissionall=0;
selective=0;
clear test
omnu=[];
Anu=[];
Bnu=[];
omboth=[];
dd=[];
lastneuron=0;
for i=1:length(tables)
eval(['test{i}=test',tables{1,i}])
omind=(test{i}.omnu>-10 );
omnu=[omnu (test{i}.TT(1,:)<0.005)|(test{i}.TT(8,:)<0.005)];
eval(['depth=reshape(ch',tables{1,i},'(omind)'',1,numel(ch',tables{1,i},'(omind)))']);
%omind=(depth >-300 & depth <1800);%deep<1800 & deep>-300
eval(['depth=reshape(ch',tables{1,i},'(omind)'',1,numel(ch',tables{1,i},'(omind)))']);

eval(['Ores=reshape(meanom',tables{1,i},'(omind,:)'',1,numel(meanom',tables{1,i},'(omind,:)))']);
eval(['Olat=reshape(latom',tables{1,i},'(omind,:)'',1,numel(latom',tables{1,i},'(omind,:)))']);
eval(['stlat=latst',tables{1,i},'(omind,:)']);
eval(['dvlat=latdv',tables{1,i},'(omind,:)']);
eval(['st=meanst',tables{1,i},'(omind,:)']);
eval(['dv=meandv',tables{1,i},'(omind,:)']);
%eval(['Obl=meanbl',tables{1,i},'(omind,:)']);


epsilon = 0.000001;
%Obl=Obl';
%Obl_norm = (Obl - min(Obl, [], 1) + epsilon) ./ (max(Obl, [], 1) - min(Obl, [], 1) + epsilon);
%Obl_norm = (Obl+epsilon) ./ (max(Obl, [], 1)+epsilon);


Ares=([st(:,1:4) dv(:,5:8)])
Ares=reshape(Ares',1,[])
Alat=([stlat(:,1:4) dvlat(:,5:8)]);
Alat=reshape(Alat',1,[]);
%Obl=reshape(Obl_norm',1,[]);
Bres=([dv(:,1:4) st(:,5:8)])
Bres=reshape(Bres',1,[])
Blat=([dvlat(:,1:4) stlat(:,5:8)]);
Blat=reshape(Blat',1,[]);
%eval(['Ares=reshape(meanst',tables{1,i},'(omind,:)'',1,numel(meanst',tables{1,i},'(omind,:)))']);
%eval(['Bres=reshape(meandv',tables{1,i},'(omind,:)'',1,numel(meandv',tables{1,i},'(omind,:)))']);

d{i}=depth;

%selective=selective+abs(test{i}.omissiont(1)-test{i}.omissiont(8));
eval(['auditoryneurons=auditoryneurons+test',tables{1,i},'.auditoryneurons'])
eval(['g=omissionall+test',tables{1,i},'.omissionall'])
%eval(['omnu=[omnu,test',tables{1,i},'.omnu]'])
eval(['omboth=[omboth,test',tables{1,i},'.omboth]'])
eval(['Anu=[Anu,test',tables{1,i},'.Anu]'])
eval(['Bnu=[Bnu,test',tables{1,i},'.Bnu]'])

dd=[dd depth];
selectivity=1%mean(meanom(:,1))<mean(meanom(:,8));
side=test{i}.side(omind);
clear Atone
Atone(side)=tables{2,i};
Atone(side==0)=tables{3,i};
repeated_vector = repmat(Atone, 8, 1) ;
Atone=repeated_vector(:)';
probB=repmat(([0.95 0.90 0.85 0.75 0.2 0.1 0.05 0]),1,length(Ores)/8);
probA=repmat([0 0.05 0.10 0.2 0.75 0.85 0.9 0.95],1,length(Ores)/8);
rat=tables{4,i}*ones(size(Ores));
penet=tables{5,i}*ones(size(Ores));
loc=tables{6,i}*ones(size(Ores));
base_vector = lastneuron+(1:length(Ores)/8) ;               
try lastneuron=base_vector(end); end
repeated_vector = repmat(base_vector, 8, 1) ;
neuron = repeated_vector(:)' ;
repeated_vector = repmat(depth, 8, 1) ;
depth = repeated_vector(:)';
length(depth)
length(Ores)
if length(Bres)~=length(Ores)
    pause
end
Db.Ores=[Db.Ores;30000*Ores'];
%Db.Obl=[Db.Obl;(Obl')];
Db.Olat=[Db.Olat;Olat'];
if ~selectivity
    Db.probA= [Db.probA;probA']; 
    Db.Atone=[Db.Atone;Atone'];
   
else Db.probA=[Db.probA;probB'];
      
    Db.Atone=[Db.Atone;Atone'];
end
Db.probB=[Db.probB;probB'];
Db.Ares=[Db.Ares;Ares'];
Db.Bres=[Db.Bres;Bres'];
Db.Alat=[Db.Alat;Alat'];
Db.Blat=[Db.Blat;Blat'];
Db.rat=[Db.rat;categorical(rat)'];
Db.penet=[Db.penet;categorical(penet)'];
Db.neuron=[Db.neuron;categorical(neuron)'];
Db.loc=[Db.loc;categorical(loc)'];
Db.depth=[Db.depth;depth'];
end

T=struct2table(Db)
lme = fitlme(T, 'Ores ~ probA+ (1 | neuron) +(1 | Atone)+ (1 | rat)+ (1 | penet)')
% omind=find(omnu>0);